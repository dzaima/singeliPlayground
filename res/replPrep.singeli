include 'debug/printf'
if (hasarch{'RVV'}) require{'riscv_vector.h'}
config _playground_displaySink = 0

def _playground_scale{} = if (hasarch{'RVV'}) __div{emit{u32, '__riscv_vlenb'},16} else 1
def _playground_err{...a} = { show{merge{...a}}; ({}=>0){0} }
def _playground_bytes{T, scale} = __shr{__add{__mul{width{T},scale}, 7}, 3}

def _playground_typed{v} = __or{is{kind{v},'constant'}, is{kind{v},'register'}}
def _playground_display{name, r} = {
  def printf{s, ...v} = emit{void, 'fprintf', 'stderr', merge{'"',s,'"'}, ...v}
  if (not _playground_typed{r}) _playground_err{'Cannot display value with kind ', kind{r}}
  def T = type{r}
  
  def printType{C} = match (typekind{C}) {
    {('primitive')} => merge{quality{C},fmtnat{width{C}}}
    {('vector')}    => merge{'[',fmtnat{vcount{C}},']', printType{eltype{C}}}
    {_} => _playground_err{'Cannot display value with typekind ', typekind{T}}
  }
  
  def scale = if (is{typekind{T},'vector'}) _playground_scale{} else 1
  
  def bytes = _playground_bytes{T, scale}
  
  if (_playground_displaySink) {
    emit{void, '_playground_sink', r}
  } else {
    printf{merge{'<VAR_SET_BEGIN>', printType{T}, ';%d;%s;%d;'}, scale, merge{'"',name,'"'}, bytes}
    rReg:=r
    def rPtr = emit{__pnt{void}, '&', rReg}
    emit{void, 'fwrite', rPtr, 1, bytes, 'stderr'}
    emit{void, 'fflush', 'stderr'}
  }
  
  r
}

def _playground_dontRun{vars,_,arg,iter} = arg
def _playground_varSet{vars,_,name,iter} = {
  _playground_display{name, iter{0,vars}}
}
def _playground_varUpd{vars,_,{reg,name},iter} = {
  def v = iter{0,vars}
  if (_playground_typed{reg} and _playground_typed{v} and not is{type{reg}, type{v}}) _playground_err{'Type changed of', ' variable "',name,'"'}
  reg = _playground_display{name, cast{type{reg}, v}}
}

def _playground_load{T} = {
  r:=undefined{T}
  def rPtr = emit{__pnt{void}, '&', r}
  emit{void, 'fread', rPtr, 1, _playground_bytes{T, _playground_scale{}}, 'stdin'}
  r
}

def display{name, v} = @_playground_varSet(name) v